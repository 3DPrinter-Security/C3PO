Example usage of C3PO's attack graph generation for performing network deployment analysis.

Perform the following steps:
0. (optional) To analyze multiple scenarios, run the genTestCases.py script. This script takes an input json file (-i/--inputFile) which specifies details about the network (in the same format as example/input.JSON). Additionally it requires an output directory for the generated files (-o/--outputDir).
1. Convert JSON files network descriptions to P files (MulVAL extended input and syntax). This can be performed with the inputJSON2P.py script. This script takes an input .JSON file (-i/--input), such as example/input.JSON or those generated in the previous step. And an output for the generated .P file (-o/--output). Additionally, it has an optional flag (--type2) this changes the format of the output attack graph from being any host to a specific target to specifying the host capable of attacking the printer.
2. Run MulVAL. This can be performed using the exampleRun.py script. Note that MulVAL's gen_script.sh must be in your PATH. This script takes an input (-i/--input) specifying the deployment as a .P file (the file generated by inputJSON2P), a MulVAL rules file (-r/--rules) such as rules.P, and optionally a text file specifying the attacker's goals (-g/--goals) such as example/goals.txt.

This will produce a number of files. The visual attack graph will be generated as a .pdf file. Additionally, .csv files will be generated with the verticies and arcs used to generate the visual attack graph.